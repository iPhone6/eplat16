<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd  
                        http://www.springframework.org/schema/mvc  
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
                        http://www.springframework.org/schema/aop
                        http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
                        http://www.springframework.org/schema/task
						http://www.springframework.org/schema/task/spring-task-3.2.xsd
						http://www.springframework.org/schema/util
						http://www.springframework.org/schema/util/spring-util-3.0.xsd
						"
                        >

	<!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->
	<context:component-scan base-package="com.cn.eplat.controller, com.cn.eplat.timedtask" />
	
	<!-- 开启注解 （不知道要不要配置这个？）
	-->
	<mvc:annotation-driven />
	<!-- 配置task任务扫描注解 -->
	<task:annotation-driven scheduler="myScheduler"/>
	<!-- 配置定时任务的线程池 -->
	<task:scheduler id="myScheduler" pool-size="5"/>
	<!-- 扫描任务 -->
    <!-- <context:component-scan base-package="com.vrveis.roundTrip.task" /> -->
	
	<!-- 在SpringMVC3.0之后推荐使用一： 
	-->
	<!-- 静态资源访问 -->
	<mvc:default-servlet-handler/>
	
	<!--
		配置静态资源，直接映射到对应的文件夹，不被DispatcherServlet处理，3.04新增功能，需要重新设置spring-mvc-3.0.xsd
	<mvc:resources mapping="/images/**" location="/images/" />
	<mvc:resources mapping="/js/**" location="/js/" />
	<mvc:resources mapping="/css/**" location="/css/" />
	<mvc:resources mapping="/helpdoc/**" location="/helpdoc/" />
	<mvc:resources mapping="/resources/**" location="/resources/" />
	<mvc:resources mapping="/plugins/**" location="/plugins/" />
	<mvc:resources mapping="/files/**" location="/files/" />
	<mvc:resources mapping="/data/**" location="/data/" />
	-->
	 
	<!--避免IE执行AJAX时，返回JSON出现下载文件 -->
	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	<!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" />	<!-- JSON转换器 -->
			</list>
		</property>
	</bean>
	<!-- 定义跳转的文件的前后缀 ，视图模式配置-->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>
	
	<!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
	<bean id="multipartResolver"  
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
        <!-- 默认编码 -->
        <property name="defaultEncoding" value="utf-8" />  
        <!-- 文件大小最大值 -->
        <property name="maxUploadSize" value="10485760000" />  
        <!-- 内存中的最大值 -->
        <property name="maxInMemorySize" value="40960" />  
    </bean>
    
	<!-- 载入配置文件 
	-->
	<util:properties id="constants" location="classpath:config/statics.properties"/>
	<util:properties id="sys" location="classpath:webconfig/sys.properties"/>
	
	<!-- REF:http://blog.csdn.net/h396071018/article/details/38333589
	<bean id="propertiesReader"
	  class="org.springframework.beans.factory.config.PropertiesFactoryBean">
	  <property name="locations">
	   <list>
	     
	    <value>classpath:param.properties</value>
	    <value>classpath:base.properties</value>
	    
	    <value>classpath:config/statics.properties</value>
	    <value>classpath:webconfig/sys.properties</value>
	   </list>
	  </property>
	</bean>
	-->
    
    <!-- 拦截器 -->
    <!-- 
    <mvc:interceptors>
    	<mvc:interceptor>
    		<mvc:mapping path="/**"/>
    		<bean class="com.cn.zpxt.intercept.EncodingInterceptor"></bean>	注意这里bean的配置要放在mvc:mapping的后面，否则会报错！
    	</mvc:interceptor>
    	<mvc:interceptor>
    	 	<mvc:mapping path="/**"/>
    	 	<bean class="com.cn.zpxt.intercept.UserLoginInterceptor">
    	 		<property name="excludeUrls">	注：拦截器中的属性要给出其set方法，这里配置的属性值才会赋值到拦截器bean的属性中去
    	 			<list>
    	 				<value>loginController.do?Login.html</value>
    	 				<value>loginController.do?LoginCheck</value>
    	 			</list>
    	 		</property>
    		</bean>
    	</mvc:interceptor>
    	配置Token拦截器，防止用户重复提交数据
        <mvc:interceptor>
            <mvc:mapping path="/**"/>这个地方时你要拦截得路径 我这个意思是拦截所有得URL
            <bean class="com.cn.zpxt.intercept.TokenInterceptor"/>class文件路径改成你自己写得拦截器路径！！
        </mvc:interceptor>
    </mvc:interceptors>
     -->

</beans>