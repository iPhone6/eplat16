<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd  
                        http://www.springframework.org/schema/mvc  
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
                        http://www.springframework.org/schema/aop
                        http://www.springframework.org/schema/aop/spring-aop-3.1.xsd"
                        >
	
	<bean id="threadPoolTaskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<!-- 核心线程数，默认为1 -->
		<property name="corePoolSize" value="10" />
		<!-- 最大线程数，默认为Integer.MAX_VALUE -->
		<property name="maxPoolSize" value="50" />
		<!-- 队列最大长度，一般需要设置值>=notifyScheduledMainExecutor.maxNum；默认为Integer.MAX_VALUE
		<property name="queueCapacity" value="1000" /> -->
		<!-- 线程池维护线程所允许的空闲时间，默认为60s -->
		<property name="keepAliveSeconds" value="300" />
		<!-- 线程池对拒绝任务（无线程可用）的处理策略，目前只支持AbortPolicy、CallerRunsPolicy；默认为后者 -->
		<property name="rejectedExecutionHandler">
			<!-- AbortPolicy:直接抛出java.util.concurrent.RejectedExecutionException异常 -->
			<!-- CallerRunsPolicy:主线程直接执行该任务，执行完之后尝试添加下一个任务到线程池中，可以有效降低向线程池内添加任务的速度 -->
			<!-- DiscardOldestPolicy:抛弃旧的任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->
			<!-- DiscardPolicy:抛弃当前任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->
			<bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy" />
		</property>
  </bean>
    
    <!-- 拦截器 -->
    <!-- 
    <mvc:interceptors>
    	<mvc:interceptor>
    		<mvc:mapping path="/**"/>
    		<bean class="com.cn.zpxt.intercept.EncodingInterceptor"></bean>	注意这里bean的配置要放在mvc:mapping的后面，否则会报错！
    	</mvc:interceptor>
    	<mvc:interceptor>
    	 	<mvc:mapping path="/**"/>
    	 	<bean class="com.cn.zpxt.intercept.UserLoginInterceptor">
    	 		<property name="excludeUrls">	注：拦截器中的属性要给出其set方法，这里配置的属性值才会赋值到拦截器bean的属性中去
    	 			<list>
    	 				<value>loginController.do?Login.html</value>
    	 				<value>loginController.do?LoginCheck</value>
    	 			</list>
    	 		</property>
    		</bean>
    	</mvc:interceptor>
    	配置Token拦截器，防止用户重复提交数据
        <mvc:interceptor>
            <mvc:mapping path="/**"/>这个地方时你要拦截得路径 我这个意思是拦截所有得URL
            <bean class="com.cn.zpxt.intercept.TokenInterceptor"/>class文件路径改成你自己写得拦截器路径！！
        </mvc:interceptor>
    </mvc:interceptors>
     -->

</beans>